<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Professor">
	<select id="selectInfo" resultType="kh.spring.dto.ProfessorDTO" >
		select 
    u.id,u.pw,u.name,u.birth,
    u.gender,u.country,u.indate,u.outdate,
    c.col_title,d.dept_title,
    u.zipcode,u.addr1,u.addr2,u.email,u.phone,
    u.bank,u.accountnum
from
    users u, college c, department d
    where u.colcode=c.col_code AND u.deptcode=d.dept_code AND u.id=#{value}
	</select>
	
	<select id="selectMil" resultType="kh.spring.dto.MilitaryDTO">
		select
m.std_code,m.mil_indate,m.mil_outdate,g.mil_title,m.mil_rank,m.mil_code
from military m, militarygroup g
    where m.mil_groupcode=g.mil_groupcode AND m.std_code=#{value}
	</select>
	
	<update id="proInfoUpdate">
		update users set name=#{name},gender=#{gender},country=#{country},birth=#{birth},indate=#{inDate},outdate=#{outDate},
		zipcode=#{zipcode},addr1=#{addr1},addr2=#{addr2},email=#{email},phone=#{phone},bank=#{bank},accountnum=#{accountnum}
		where id=#{id}
	</update>
	
	<select id="selectProList" resultType="kh.spring.dto.ProListDTO">
		select u.id, u.name, u.birth, u.gender, u.country,u.email,u.phone, p.pro_office from users u,professor p where substr(id,0,1) = 'P' and deptcode = (select deptcode from users where id=#{value}) and u.id=p.pro_id
	</select>
	<select id="selectDepartment" resultType="kh.spring.dto.DepartmentDTO">
	select dept_code, dept_title, col_title as col_code, build_code,ofi_code from department d, college c where d.col_code = c.col_code and d.dept_code = (select deptcode from users where id=#{value})
	</select>
	
	<select id="selectDepartmentOffice" resultType="kh.spring.dto.DepartmentOfficeDTO">
	select * from departmentoffice where ofi_code=(select ofi_code from department where dept_code =(select deptcode from users where id=#{value}))
	</select>
	
	<select id="selectProAttendMng" resultType="kh.spring.dto.ProAttendMngDTO">
	select * from pro_attendmng where att_leccode in(select oc_code from open_class where oc_pro_code=#{value})
	</select>
	
	<select id="selectProSchedule" resultType="kh.spring.dto.ProScheduleDTO">
	select * from pro_schedule where sche_proid=#{value}
	</select>
	
	<delete id="delProSchedule" parameterType="java.util.List">
		delete from pro_schedule where sche_seq in
		<foreach collection="list" item="i" open="(" separator="," close=")">
			#{i.sche_seq}
		</foreach>
	</delete>
	
	<insert id="insertProSchedule">
		insert into pro_schedule values(pro_schedule_seq.nextval,#{sche_proId},#{sche_proName},#{sche_contents},#{sche_date},#{sche_title},#{sche_type})
	</insert>
	
	<update id="updateProSchedule">
		update pro_schedule set sche_title=#{sche_title},sche_contents=#{sche_contents},sche_date=#{sche_date},sche_type=#{sche_type} where sche_seq=#{sche_seq}
	</update>
	
	<select id="selectCRDetail" resultType="kh.spring.dto.ClassRegistrationDetailDTO">
		select  c.lec_code,sub.name as title, u.id, d.dept_title,u.name,s.std_year from users u, department d, classregistration c, students s, subject sub
where u.deptcode=d.dept_code AND u.id=s.id AND c.id=s.id AND sub.code=c.lec_code AND c.lec_code in(select oc_code from open_class where oc_pro_code=#{value}) order by 1 asc
	</select>
	
	<insert id="insertAttend">
	insert into pro_attendmng values(pro_attendmng_seq.nextval,#{att_lecCode},#{att_year},#{att_targetLevel},#{att_semester},#{att_lecTitle},null,null,#{att_stdId},#{att_deptName},#{att_stdName},#{att_stdLevel},#{att_week})
	</insert>
	
	<update id="saveAttend">

		<foreach collection="list" item="i" index="index" separator=";" open="DECLARE BEGIN" close="; END;">
		 UPDATE pro_attendmng SET att_date=#{i.att_date},att_attend=#{i.att_attend}
		  WHERE att_seq=#{i.att_seq}  
		  </foreach>

	</update>
	
	<select id="selectAttCheckAll" resultType="kh.spring.dto.AttendanceStatusDTO">
	select att_leccode,att_deptname, att_stdid, att_stdlevel, att_stdname,count(case when att_attend='O' then 1 end)as attend,
count(case when att_attend='/' then 1 end)as late,
count(case when att_attend='X' then 1 end)as absent
from pro_attendmng where att_leccode=#{value} group by att_deptname, att_stdid, att_stdname, att_stdlevel,att_leccode
	</select>
	
	<select id="selectGrade" resultType="kh.spring.dto.GradeDTO">
	select * from grade where lec_code in (select lec_code from lecture where lec_code in (select oc_code from open_class where oc_pro_code=#{value}))
	</select>
	
	<insert id="addGrade">
	insert into grade values(grade_seq.nextval,#{std_id},#{lec_code},#{grade_code},#{grade_attend},#{grade_repo},#{grade_mid},#{grade_pre},#{grade_final},#{grade_atti},#{grade_quiz},#{grade_etc},#{grade_total})
	</insert>
	
	<delete id="deleteGrade">
	delete from grade where grade_seq=#{grade_seq}
	</delete>
	
	<update id="updateGrade">
	<foreach collection="list" item="i" index="index" separator=";" open="DECLARE BEGIN" close="; END;">
		 UPDATE grade SET grade_code=#{i.grade_code},grade_attend=#{i.grade_attend},grade_repo=#{i.grade_repo},grade_mid=#{i.grade_mid},
		 grade_pre=#{i.grade_pre},grade_final=#{i.grade_final},grade_atti=#{i.grade_atti},grade_quiz=#{i.grade_quiz},grade_etc=#{i.grade_etc},grade_total=#{i.grade_total}
		  WHERE grade_seq=#{i.grade_seq}  
		  </foreach>
	</update>
</mapper>